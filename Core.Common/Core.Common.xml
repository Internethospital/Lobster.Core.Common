<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core.Common</name>
    </assembly>
    <members>
        <member name="T:Core.Common.CoreFrame.AbstractCoreFrame">
            <summary>
            核心框架基类
            </summary>
        </member>
        <member name="F:Core.Common.CoreFrame.AbstractCoreFrame.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="F:Core.Common.CoreFrame.AbstractCoreFrame.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:Core.Common.CoreFrame.AbstractCoreFrame.IsTransaction">
            <summary>
            是否处于事务中
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractCoreFrame.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractCoreFrame.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractCoreFrame.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractCoreFrame.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractCoreFrame.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Core.Common.CoreFrame.AbstractDao">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetModel``1(System.Int32)">
            <summary>
            根据主键获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.Save``1(``0)">
            <summary>
            保存更新实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.Delete``1(System.Int32)">
            <summary>
            删除实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetList``1(System.String)">
            <summary>
            根据条件查询实体列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetTableName(System.Object)">
            <summary>
            获取表名
            默认使用类名和覆盖，如果类有一个Table属性
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetTableName(System.Type)">
            <summary>
            获取表名
            默认使用类名和覆盖，如果类有一个Table属性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetKeyValue``1(``0)">
            <summary>
            获取实体类中主键的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetIdProperties(System.Object)">
            <summary>
            获取被命名ID的或Key特性的所有属性
            为了插入和更新
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.AbstractDao.GetIdProperties(System.Type)">
            <summary>
            获取被命名ID的或Key特性的所有属性
            </summary>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.CoreFrame.ActionCoreFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.ActionCoreFrame.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            在Action方法调用前
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Core.Common.CoreFrame.ActionCoreFrame.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
             在Action方法调用后
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Core.Common.CoreFrame.ApiControllerBase">
            <summary>
            自定义API基类
            </summary>
        </member>
        <member name="P:Core.Common.CoreFrame.ApiControllerBase.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.CoreFrame.ApiControllerBase.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:Core.Common.CoreFrame.ApiControllerBase.IsTransaction">
            <summary>
            是否处于事务中
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.ApiControllerBase.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.ApiControllerBase.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.ApiControllerBase.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.ApiControllerBase.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.ApiControllerBase.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Core.Common.CoreFrame.HiddenApiAttribute">
            <summary>
            隐藏接口，不生成到swagger文档展示
            </summary>
        </member>
        <member name="T:Core.Common.CoreFrame.HiddenApiFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.HiddenApiFilter.Apply(Swashbuckle.AspNetCore.Swagger.SwaggerDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            重写Apply方法，移除隐藏接口的生成
            </summary>
            <param name="swaggerDoc"></param>
            <param name="context"></param>
        </member>
        <member name="T:Core.Common.CoreFrame.WebControllerBase">
            <summary>
            自定义Web基类
            </summary>
        </member>
        <member name="P:Core.Common.CoreFrame.WebControllerBase.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.CoreFrame.WebControllerBase.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:Core.Common.CoreFrame.WebControllerBase.IsTransaction">
            <summary>
            是否处于事务中
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.WebControllerBase.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.WebControllerBase.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.WebControllerBase.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.CoreFrame.WebControllerBase.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.CoreFrame.WebControllerBase.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Data.PageInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.pageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.pageNo">
            <summary>
            要取的页面，默认为0页
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.totalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.totalRecord">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.OrderBy">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:Core.Common.Data.PageInfo.ColumnLength">
            <summary>
            列的长度
            </summary>
        </member>
        <member name="T:Core.Common.Data.Response">
            <summary>
            视图数据
            </summary>
        </member>
        <member name="P:Core.Common.Data.Response.code">
            <summary>
            状态 0正常 1错误
            </summary>
        </member>
        <member name="P:Core.Common.Data.Response.msg">
            <summary>
            提示内容
            </summary>
        </member>
        <member name="P:Core.Common.Data.Response.data">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="M:Core.Common.Data.Response.AddData``1(System.String,``0)">
            <summary>
            添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Core.Common.Data.Response.GetData``1(System.String)">
            <summary>
            获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Data.Response.GetJsonData">
            <summary>
            获取Json数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Data.Response.SetJsonData(System.String)">
            <summary>
            导入Json数据
            </summary>
            <param name="jsondata"></param>
        </member>
        <member name="T:Core.Common.Data.SqlPage">
            <summary>
            SQL语句进行分页包装
            </summary>
        </member>
        <member name="M:Core.Common.Data.SqlPage.FormatSql(Core.Common.Data.DatabaseType,System.String,Core.Common.Data.PageInfo,System.Data.Common.DbConnection)">
            <summary>
            格式化SQL语句
            </summary>
            <param name="strsql"></param>
            <param name="pageInfo"></param>
            <param name="oleDb"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Data.DatabaseType">
            <summary>
            数据库类别
            </summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.UnKnown">
            <summary>未指定数据库</summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.IbmDb2">
            <summary>IBMDB2数据库</summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.SqlServer">
            <summary>SqlServer数据库</summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.MsAccess">
            <summary>Access数据库</summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.MySQL">
            <summary>MySQL数据库</summary>
        </member>
        <member name="F:Core.Common.Data.DatabaseType.Oracle">
            <summary>Oracle数据库</summary>
        </member>
        <member name="T:Core.Common.Helper.IApiHelper">
            <summary>
            API辅助接口
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IApiHelper.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IApiHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IApiHelper.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IApiHelper.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IApiHelper.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IApiHelper.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.IApiHelper.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Core.Common.Helper.ApiHelper.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.ApiHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:Core.Common.Helper.ApiHelper.IsTransaction">
            <summary>
            是否处于事务中
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ApiHelper.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ApiHelper.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ApiHelper.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ApiHelper.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ApiHelper.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConfigHelper.GetSetting(System.String)">
            <summary>
            获取某个配置节点的值
            </summary>
            <param name="key">配置节点</param>
            <returns>配置节点的值</returns>
        </member>
        <member name="T:Core.Common.Helper.ConvertExtend">
            <summary>
            Convert 的摘要说明
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.IsNull(System.Object,System.String)">
            <summary>
            将Null值转换为指定值
            </summary>
            <param name="obj">待判断的值</param>
            <param name="nValue">指定值</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.IsNumeric(System.String)">
             <summary>
            判断输入字符串是否为数字
             </summary>
             <param name="nValue">字符串</param>
             <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.IsInteger(System.String)">
             <summary>
            判断输入字符串是否为整数
             </summary>
             <param name="nValue">字符串</param>
             <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ToString(System.Object,System.String)">
            <summary>
            转换字符串
            </summary>
            <param name="val"></param>
            <param name="defaultVal"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ToDataTable(System.Collections.IList)">
            <summary>
            List转DataTable
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            List转DataTable，List无记录带结构
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ToDictionary(System.Data.DataTable,System.Int32)">
            <summary>
            DataTable行数据转Dictionary
            </summary>
            <param name="dt"></param>
            <param name="Rowindex"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ToDictionary(System.Object)">
            <summary>
            对象转Dictionary
            </summary>
            <param name="in_obj"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.DicToObject``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            字典类型转化为对象
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ConvertAmountInWords(System.Decimal)">
            
             数字字符串（根据支票显示,例如：700,显示为柒百圆整）
             转换成中文大写后的字符串或者出错信息提示字符串
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.IsPositveDecimal(System.String)">
            
             判断是否是正数字字符串
            
             判断字符串
             如果是数字，返回true，否则返回false
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ConvertData(System.String)">
            
             转换数字（整数）
            
             需要转换的整数数字字符串
             转换成中文大写后的字符串
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ConvertXiaoShu(System.String)">
            
             转换数字（小数部分）
            
             需要转换的小数部分数字字符串
             转换成中文大写后的字符串
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ConvertDigit(System.String)">
            
             转换数字
            
             转换的字符串（四位以内）
            
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.Convert4Digit(System.String)">
            
             转换四位数字
            
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.Convert3Digit(System.String)">
            
             转换三位数字
            
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.Convert2Digit(System.String)">
            
             转换二位数字
            
        </member>
        <member name="M:Core.Common.Helper.ConvertExtend.ConvertChinese(System.String)">
            
             将一位数字转换成中文大写数字
            
        </member>
        <member name="T:Core.Common.Helper.DESEncryptor">
            <summary>
            加密解密
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.inputString">
            <summary>
            输入字符串
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.outString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.inputFilePath">
            <summary>
            输入文件路径
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.outFilePath">
            <summary>
            输出文件路径
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.encryptKey">
            <summary>
            加密密钥
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.decryptKey">
            <summary>
            解密密钥
            </summary>
        </member>
        <member name="F:Core.Common.Helper.DESEncryptor.noteMessage">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.InputString">
            <summary>
            输入字符串
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.OutString">
            <summary>
            输出字符串
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.InputFilePath">
            <summary>
            输入文件路径
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.OutFilePath">
            <summary>
            输出文件路径
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.EncryptKey">
            <summary>
            加密密钥
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.DecryptKey">
            <summary>
            解密密钥
            </summary>
        </member>
        <member name="P:Core.Common.Helper.DESEncryptor.NoteMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.DesEncrypt">
            <summary>
            加密字符串
            注意:密钥必须为８位
            </summary>
            <param name="strText">字符串</param>
            <param name="encryptKey">密钥</param>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.DesEncrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.DesDecrypt">
            <summary>
            解密字符串
            </summary>
            <param name="this.inputString.inputString">加了密的字符串</param>
            <param name="decryptKey">密钥</param>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.DesDecrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.FileDesEncrypt">
            <summary>
            DES加密文件
            </summary>
            <param name="this.inputFilePath.inputFilePath">源文件路径</param>
            <param name="this.outFilePath.outFilePath">输出文件路径</param>
            <param name="encryptKey">密钥</param>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.FileDesDecrypt">
            <summary>
            解密文件
            </summary>
            <param name="this.inputFilePath.inputFilePath">加密了的文件路径</param>
            <param name="this.outFilePath.outFilePath">输出文件路径</param>
            <param name="decryptKey">密钥</param>
        </member>
        <member name="M:Core.Common.Helper.DESEncryptor.MD5Encrypt">
            <summary>
            MD5 Encrypt
            </summary>
            <param name="strText">text</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="T:Core.Common.Helper.ExcelHelper">
            <summary>
            导出Excel
            </summary>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Export(System.Data.DataTable,System.String,System.String)">
            <summary>  
            DataTable导出到Excel文件  
            </summary>  
            <param name="dtSource">源DataTable</param>  
            <param name="strHeaderText">表头文本</param>  
            <param name="strFileName">保存位置</param>  
            <Author></Author>  
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Export(System.Data.DataTable,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            DataTable导出到Excel文件，可以自定义导出那些列
            </summary>
            <param name="dtSource"></param>
            <param name="strHeaderText"></param>
            <param name="columnNames"></param>
            <param name="strFileName"></param>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Export(System.Data.DataTable,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
             DataTable导出到Excel文件，可以自定义导出列和设置列的数据格式
            </summary>
            <param name="dtSource"></param>
            <param name="strHeaderText"></param>
            <param name="columnNames"></param>
            <param name="dataformats"></param>
            <param name="strFileName"></param>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Export(System.Data.DataTable,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>  
            DataTable导出到Excel的MemoryStream  
            </summary>  
            <param name="dtSource">源DataTable</param>  
            <param name="strHeaderText">表头文本</param>  
            <Author> 2010-5-8 22:21:41</Author>  
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Import(System.String)">
            <summary>读取excel  
            默认第一行为标头  
            </summary>  
            <param name="strFileName">excel文档路径</param>  
            <returns></returns>  
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.ExcelToEntityList``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.StringBuilder@)">
            <summary>
            从Excel取数据并记录到List集合里
            </summary>
            <param name="cellHeard">单元头的值和名称：{ { "UserName", "姓名" }, { "Age", "年龄" } };</param>
            <param name="filePath">保存文件绝对路径</param>
            <param name="errorMsg">错误信息</param>
            <returns>转换后的List对象集合</returns>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.Excel2003ToEntityList``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Text.StringBuilder@)">
            <summary>
            从Excel2003取数据并记录到List集合里
            </summary>
            <param name="cellHeard">单元头的Key和Value：{ { "UserName", "姓名" }, { "Age", "年龄" } };</param>
            <param name="filePath">保存文件绝对路径</param>
            <param name="errorMsg">错误信息</param>
            <returns>转换好的List对象集合</returns>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.EntityListToExcel2003(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.IList,System.String)">
            <summary>
            实体类集合导出到EXCLE2003
            </summary>
            <param name="cellHeard">单元头的Key和Value：{ { "UserName", "姓名" }, { "Age", "年龄" } };</param>
            <param name="enList">数据源</param>
            <param name="sheetName">工作表名称</param>
            <returns>文件的下载地址</returns>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.SaveExcelFile(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            保存Excel文件
            <para>Excel的导入导出都会在服务器生成一个文件</para>
            <para>路径：UpFiles/ExcelFiles</para>
            </summary>
            <param name="file">传入的文件对象</param>
            <returns>如果保存成功则返回文件的位置;如果保存失败则返回空</returns> 
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.GetExcelCellToProperty(System.Type,NPOI.SS.UserModel.ICell)">
            <summary>
            从Excel获取值传递到对象的属性里
            </summary>
            <param name="distanceType">目标对象类型</param>
            <param name="sourceCell">对象属性的值</param>
        </member>
        <member name="M:Core.Common.Helper.ExcelHelper.SaveImage(Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            应用图片
            </summary>
            <param name="formFile"></param>
            <param name="webRootPath"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.HttpHelper.Post(System.String)">
            <summary>        
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <returns></returns>        
        </member>
        <member name="M:Core.Common.Helper.HttpHelper.HttpApi(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <param name="dic">键值对参数</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.HttpHelper.Post(System.String,System.String)">
            <summary>
            指定Post地址使用Get 方式获取全部字符串
            </summary>
            <param name="url">请求后台地址</param>
            <param name="content">Post提交数据内容(utf-8编码的)</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.HttpHelper.HttpApi(System.String,System.String,System.String)">
            <summary>
            调用api返回json
            </summary>
            <param name="url">api地址</param>
            <param name="jsonstr">接收参数</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Helper.ImageUniqueCode">
            <summary>
            登录验证码
            </summary>
        </member>
        <member name="T:Core.Common.Helper.ImageValidateCode">
            <summary>
            生成图片验证码类
            </summary>
        </member>
        <member name="P:Core.Common.Helper.ImageValidateCode.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Core.Common.Helper.ImageValidateCode.ImageByte">
            <summary>
            验证码字节数组
            </summary>
        </member>
        <member name="T:Core.Common.Helper.Rand">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Core.Common.Helper.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:Core.Common.Helper.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Core.Common.Helper.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Core.Common.Helper.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Core.Common.Helper.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Core.Common.Helper.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="T:Core.Common.Helper.LogHelper">
            <summary>
            日志处理类
            </summary>
        </member>
        <member name="T:Core.Common.Helper.IOrientDbHelper">
            <summary>
            接口
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IOrientDbHelper.odatabase">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IOrientDbHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="T:Core.Common.Helper.OrientDbHelper">
            <summary>
            实现类
            </summary>
        </member>
        <member name="M:Core.Common.Helper.OrientDbHelper.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Core.Common.Helper.OrientDbHelper.odatabase">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.OrientDbHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.RedisHelper.SetValue(System.String,System.String)">
            <summary>
            增加/修改
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.RedisHelper.GetValue(System.String)">
            <summary>
            查询
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.RedisHelper.DeleteKey(System.String)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.RedisHelper.Exists(System.String)">
            <summary>
            验证是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Helper.RestHelper">
            <summary>
            RestHelper帮助类
            </summary>
        </member>
        <member name="M:Core.Common.Helper.RestHelper.ExecutePost``2(System.String,RestSharp.RestRequest,``1,System.String,System.String)">
            <summary>
            Generic Post method
            <param name="request">Restsharp request object</param> 
            <param name="obj">Object that you want to serialize</param>
            <param name="userName">BrowserStack User Name</param>
            <param name="accessKey">BrowserStack Access Key</param>
            </summary>
        </member>
        <member name="M:Core.Common.Helper.RestHelper.ExecutePost``1(System.String,RestSharp.RestRequest,System.String,System.String)">
            <summary>
            Generic Post method
            <param name="request">Restsharp request object</param> 
            <param name="userName">BrowserStack User Name</param>
            <param name="accessKey">BrowserStack Access Key</param>
            </summary>
        </member>
        <member name="M:Core.Common.Helper.RestHelper.ExecuteGet``1(System.String,RestSharp.RestRequest,System.String,System.String)">
            <summary>
            Generic Post method
            <param name="request">Restsharp request object</param>
            <param name="userName">BrowserStack User Name</param>
            <param name="accessKey">BrowserStack Access Key</param>
            </summary>
        </member>
        <member name="M:Core.Common.Helper.RestHelper.GetResponseData(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},RestSharp.Method)">
            <summary>
            模拟请求API接口
            </summary>
            <param name="url">API接口地址</param>
            <param name="dic">字典类型入参</param>
            <param name="method">请求类型：GET/POST</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Helper.SpellAndWbCode">
            <summary>
            生成汉子拼音码和五笔码
            </summary>
        </member>
        <member name="F:Core.Common.Helper.SpellAndWbCode.xmld">
            <summary>
            XMLDoc
            </summary>
        </member>
        <member name="M:Core.Common.Helper.SpellAndWbCode.getXmlData">
            <summary>
            读取XML文件中数据
            </summary>
            <returns>返回String[]</returns>
        </member>
        <member name="M:Core.Common.Helper.SpellAndWbCode.GetSpellCode(System.String,System.Int32,System.Int32)">
            <summary>
            获得汉语的拼音码
            </summary>
            <param name="strName">汉字</param>
            <param name="start">搜索的开始位置</param>
            <param name="len">搜索的结束位置</param>
            <returns>汉语反义成字符串，该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:Core.Common.Helper.SpellAndWbCode.GetSpellCode(System.String)">
            <summary>
            获得汉语的拼音码
            </summary>
            <param name="strName">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.SpellAndWbCode.GetWBCode(System.String,System.Int32,System.Int32)">
            <summary>
            获得汉语的五笔码
            </summary>
            <param name="strName">汉字</param>
            <param name="start">搜索的开始位置</param>
            <param name="len">搜索的结束位置</param>
            <returns>汉语反义成字符串，该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:Core.Common.Helper.SpellAndWbCode.GetWBCode(System.String)">
            <summary>
            获得汉语的五笔码
            </summary>
            <param name="strName">汉字</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Helper.TimeHelper">
            <summary>
            时间扩展类
            解决Linux与Windows时间一致性问题
            </summary>
        </member>
        <member name="M:Core.Common.Helper.TimeHelper.ToCstTime(System.DateTime)">
            <summary>
            转换时间格式到东八区，以防docker与windows时区不一致问题
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Helper.IWebHelper">
            <summary>
            Web辅助接口
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IWebHelper.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.IWebHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IWebHelper.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IWebHelper.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IWebHelper.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.IWebHelper.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.IWebHelper.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Core.Common.Helper.WebHelper.connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Core.Common.Helper.WebHelper.transaction">
            <summary>
            数据库事务
            </summary>
        </member>
        <member name="F:Core.Common.Helper.WebHelper.IsTransaction">
            <summary>
            是否处于事务中
            </summary>
        </member>
        <member name="M:Core.Common.Helper.WebHelper.BeginTransaction">
            <summary>
            启动一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.WebHelper.CommitTransaction">
            <summary>
            提交一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.WebHelper.RollbackTransaction">
            <summary>
            回滚一个事务
            </summary>
        </member>
        <member name="M:Core.Common.Helper.WebHelper.NewObject``1">
            <summary>
            创建Object对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Helper.WebHelper.NewDao``1">
            <summary>
            创建Dao对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Messge.ClMessage">
            <summary>
            创蓝短信
            </summary>
        </member>
        <member name="M:Core.Common.Messge.ClMessage.#ctor(System.String,System.String,Core.Common.Messge.HTTPMethod,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="appid"></param>
            <param name="appkey"></param>
            <param name="httpMethod">请求方式</param>
            <param name="url"></param>
        </member>
        <member name="M:Core.Common.Messge.ClMessage.send(System.String,System.String,System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="phoneNumber">手机号码</param>
            <param name="msg">消息</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Messge.ClMessage.sendWithParam(System.String,System.Int32,System.String[],System.String,System.String,System.String)">
            <summary>
            发送短息
            </summary> 
            <param name="phoneNumber">手机号码</param>
            <param name="templateId">模板编号</param>
            <param name="parameters">参数</param>
            <param name="sign">验证(选填参数)</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Messge.IMessage">
            <summary>
            短信发送接口类
            </summary>
        </member>
        <member name="M:Core.Common.Messge.IMessage.send(System.String,System.String,System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="phoneNumber">手机号码</param>
            <param name="msg">消息</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Messge.IMessage.sendWithParam(System.String,System.Int32,System.String[],System.String,System.String,System.String)">
            <summary>
            发送短息
            </summary>
            <param name="phoneNumber">手机号码</param>
            <param name="templateId">模板编号</param>
            <param name="parameters">参数</param>
            <param name="sign">验证(选填参数)</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Messge.HTTPMethod">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="T:Core.Common.Messge.MessageConfig">
            <summary>
            短信平台配置
            </summary>
        </member>
        <member name="M:Core.Common.Messge.MessageConfig.#ctor(System.String,System.String)">
            <summary>
            短信配置
            </summary>
            <param name="appid">appid</param>
            <param name="appkey">appkey</param>
        </member>
        <member name="M:Core.Common.Messge.MessageConfig.#ctor(System.String,System.String,Core.Common.Messge.HTTPMethod,System.String)">
            <summary>
            短信配置
            </summary>
            <param name="appid">appid</param>
            <param name="appkey">appkey</param>
            <param name="httpMethod">请求方式</param>
            <param name="url">发送地址</param>
        </member>
        <member name="T:Core.Common.Messge.TxMessage">
            <summary>
            腾讯云短信
            </summary>
        </member>
        <member name="M:Core.Common.Messge.TxMessage.#ctor(System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="appid"></param>
            <param name="appkey"></param>
        </member>
        <member name="M:Core.Common.Messge.TxMessage.send(System.String,System.String,System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="phoneNumber">手机号码</param>
            <param name="msg">消息</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="M:Core.Common.Messge.TxMessage.sendWithParam(System.String,System.Int32,System.String[],System.String,System.String,System.String)">
            <summary>
            发送短息
            </summary> 
            <param name="phoneNumber">手机号码</param>
            <param name="templateId">模板编号</param>
            <param name="parameters">参数</param>
            <param name="sign">验证(选填参数)</param>
            <param name="extend">扩展(选填参数)</param>
            <param name="ext">说明(选填参数)</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Weixin.WeixinMsg">
            <summary>
            发送微信公众号消息
            </summary>
        </member>
        <member name="M:Core.Common.Weixin.WeixinMsg.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            发送消息
            </summary>
            <param name="weixinAppId">小程序AppID</param>
            <param name="appId">开发者ID（微信公众号）</param>
            <param name="openId">接收者ID（微信公众号）</param>
            <param name="pagepath">小程序跳转链接</param>
            <param name="templateId">消息模板</param>
            <param name="url"></param>
            <param name="title">标题</param>
            <param name="_first"></param>
            <param name="_remark"></param>
            <param name="_params">参数替换</param>
            <returns></returns>
        </member>
        <member name="T:Core.Common.Weixin.WeiXinTemplate">
            <summary>
            微信模板类
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.keyword1">
            <summary>
             
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.keyword2">
            <summary>
             
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.keyword3">
            <summary>
             
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.keyword4">
            <summary>
             
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.keyword5">
            <summary>
             
            </summary>
        </member>
        <member name="P:Core.Common.Weixin.WeiXinTemplate.remark">
            <summary>
            
            </summary>
        </member>
        <member name="M:Core.Common.Weixin.WeiXinTemplate.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            排队叫号通知模板
            </summary>
            <param name="templateId">模板ID</param>
            <param name="url"></param>
            <param name="room">诊室</param>
            <param name="doctor">医生</param>
        </member>
    </members>
</doc>
